<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Products">

    <select id="findByCondition" resultType="products">
        SELECT
        rownum,
        b.book_isbn,
        b.book_name,
        b.book_price,
        b.book_publisher,
        b.book_author,
        b.book_country_type,
        b.book_category,
        b.book_state,
        b.book_register_date
        FROM (
        SELECT
        book_isbn,
        book_name,
        book_price,
        book_publisher,
        book_author,
        book_country_type,
        book_category,
        book_state,
        book_register_date
        FROM
        books
        WHERE
        book_deleted = '01'
        <if test="book_state != null and book_state != ''">
            AND book_state = #{book_state}
        </if>
        <if test="start_date != null">
            AND book_register_date >= #{start_date}
        </if>
        <if test="end_date != null">
            AND book_register_date <![CDATA[<=]]> #{end_date}
        </if>
        <if test="search_conditions != null and search_conditions != '' and word != null and word != ''">
            <choose>
                <when test="search_conditions == 'book_isbn'">
                    AND book_isbn LIKE CONCAT('%', #{word}, '%')
                </when>
                <when test="search_conditions == 'book_name'">
                    AND book_name LIKE CONCAT('%', #{word}, '%')
                </when>
            </choose>
        </if>
        ORDER BY book_register_date DESC
        ) b
    </select>


    <select id="getDetail" parameterType="String" resultType="products">
        SELECT
        book_isbn,
        book_name,
        book_price,
        book_publisher,
        book_author,
        book_qty,
        book_intro,
        book_country_type,
        book_category,
        book_state,
        book_thumbnail_original,
        book_thumbnail_changed,
        book_publish_date,
        book_register_date
        FROM
        books
        WHERE
        book_isbn = #{book_isbn}
    </select>

    <select id="existsByIsbn" resultType="String" parameterType="products">
        SELECT
        book_isbn
        FROM books
        WHERE book_isbn = #{book_isbn}
    </select>

    <select id="deleteState" resultType="String" parameterType="products">
        SELECT
        book_deleted
        FROM books
        WHERE book_isbn = #{book_isbn}
    </select>

    <insert id="insertBookInfo" parameterType="products">
        INSERT INTO
        books (
        book_isbn,
        book_name,
        book_price,
        book_publisher,
        book_author,
        book_qty,
        book_intro,
        book_country_type,
        book_category,
        book_state,
        book_thumbnail_original,
        book_thumbnail_changed,
        book_publish_date
        ) VALUES (
        #{book_isbn, jdbcType=VARCHAR},
        #{book_name, jdbcType=VARCHAR},
        #{book_price, jdbcType=NUMERIC},
        #{book_publisher, jdbcType=VARCHAR},
        #{book_author, jdbcType=VARCHAR},
        #{book_qty, jdbcType=INTEGER},
        #{book_intro, jdbcType=VARCHAR},
        #{book_country_type, jdbcType=VARCHAR},
        #{book_category, jdbcType=VARCHAR},
        #{book_state, jdbcType=VARCHAR},
        #{book_thumbnail_original, jdbcType=VARCHAR},
        #{book_thumbnail_changed, jdbcType=VARCHAR},
        #{book_publish_date, jdbcType=DATE}
        )
    </insert>


    <update id="updateBookInfo" parameterType="products">
        UPDATE
        books
        SET
        book_name = #{book_name, jdbcType=VARCHAR},
        book_price = #{book_price},
        book_publisher = #{book_publisher},
        book_author = #{book_author},
        book_qty = #{book_qty, jdbcType=INTEGER},
        book_intro = #{book_intro},
        book_country_type = #{book_country_type, jdbcType=CHAR},
        book_category = #{book_category},
        book_state = #{book_state},
        book_publish_date = #{book_publish_date},
        book_thumbnail_original = #{book_thumbnail_original, jdbcType=VARCHAR},
        book_thumbnail_changed = #{book_thumbnail_changed, jdbcType=VARCHAR},
        book_deleted = #{book_deleted, jdbcType=CHAR}
        WHERE
        book_isbn = #{book_isbn}
    </update>

    <!-- 밖에서 버튼 클릭으로 상태 바꿀지..? -->
    <update id="updateBookState" parameterType="products">
        UPDATE
        books
        SET
        book_state = #{book_state}
        WHERE
        book_isbn = #{book_isbn}
    </update>

    <update id="deleteBook" parameterType="java.util.HashMap">
        UPDATE
        books
        SET
        book_deleted = #{book_deleted}
        WHERE
        book_isbn = #{book_isbn}
    </update>


    <!--  유저페이지  -->
    
    <select id="getProductList" resultType="userProducts" parameterType="userCondition">
    	SELECT
		    b.book_isbn,
		    b.book_name, 
		    b.book_price, 
		    b.book_publisher, 
		    b.book_author,
		    b.book_publish_date,
		    b.book_state,
		    b.book_qty,
		    b.book_thumbnail_changed,
		    NVL(SUM(
	            <choose>
	                <when test="selectedDateCd != null and !selectedDateCd.equals('') and selectedDateCd.equals('01')">
	            	CASE
	                    WHEN co.order_payment_status = '01' AND TO_CHAR(co.order_purchase_date, 'YYYY-MM-DD') 
	                    BETWEEN TO_CHAR(TRUNC(current_timestamp, 'IW'), 'YYYY-MM-DD') 
	                    AND TO_CHAR(TRUNC(current_timestamp, 'IW') + 6, 'YYYY-MM-DD') 
	                    THEN cod.order_detail_qty
	                END    
	                </when>
	                <when test="selectedDateCd != null and !selectedDateCd.equals('') and selectedDateCd.equals('02')">
	                CASE
	                    WHEN co.order_payment_status = '01' AND TO_CHAR(co.order_purchase_date, 'YYYY-MM-DD') 
	                    BETWEEN TO_CHAR(TRUNC(current_timestamp, 'MM'), 'YYYY-MM-DD') 
	                    AND TO_CHAR(LAST_DAY(current_timestamp), 'YYYY-MM-DD')
	                    THEN cod.order_detail_qty
	                END    
	                </when>
	                <when test="selectedDateCd != null and !selectedDateCd.equals('') and selectedDateCd.equals('03')">
	                CASE
	                    WHEN co.order_payment_status = '01' AND TO_CHAR(co.order_purchase_date, 'YYYY-MM-DD') 
	                    BETWEEN TO_CHAR(TRUNC(current_timestamp, 'YYYY'), 'YYYY-MM-DD') 
	                    AND TO_CHAR(ADD_MONTHS(TRUNC(current_timestamp, 'YYYY'), 12) - 1, 'YYYY-MM-DD') 
	                    THEN cod.order_detail_qty
	                END    
	                </when>
	                <otherwise>
	                	CASE
        		            WHEN co.order_payment_status = '01' THEN cod.order_detail_qty
	                    END
	                </otherwise>
	            </choose>
		    ), 0) AS order_count,
		    NVL(COUNT(r.review_num), 0) AS review_rating_cnt,
		    ROUND(NVL(AVG(r.review_rating), 0), 2) AS reviews_rating_avg
		FROM
		    books b
		    LEFT JOIN customer_order_details cod ON b.book_isbn = cod.book_isbn
		    LEFT JOIN customer_orders co ON cod.order_num = co.order_num
		    LEFT JOIN reviews r ON cod.order_detail_num = r.order_detail_num
		WHERE
		    b.book_deleted = '01'
		    <if test="word != null and !word.equals('')">
		        <if test="search_conditions == null">
		            AND REPLACE(LOWER(b.book_name), ' ', '') LIKE '%' || REPLACE(LOWER(#{word}), ' ', '') || '%'
		        </if>
		        <if test="search_conditions != null and !search_conditions.equals('') and search_conditions.equals('book_title')">
		            AND REPLACE(LOWER(b.book_name), ' ', '') LIKE '%' || REPLACE(LOWER(#{word}), ' ', '') || '%'
		        </if>
		        <if test="search_conditions != null and !search_conditions.equals('') and search_conditions.equals('book_author')">
		            AND REPLACE(LOWER(b.book_author), ' ', '') LIKE '%' || REPLACE(LOWER(#{word}), ' ', '') || '%'
		        </if>
		        <if test="search_conditions != null and !search_conditions.equals('') and search_conditions.equals('book_publisher')">
		            AND REPLACE(LOWER(b.book_publisher), ' ', '') LIKE '%' || REPLACE(LOWER(#{word}), ' ', '') || '%'
		        </if>
		    </if>
		    <if test="search_field != null and !search_field.equals('')">
		        AND b.book_category = (SELECT category_name FROM book_categorys WHERE category_num = #{search_field})
		    </if>
		    <if test="categoryCountryType != null and !categoryCountryType.equals('')">
		        <if test="categoryCountryType == '01'">
		            AND b.book_country_type = '01'
		        </if>
		        <if test="categoryCountryType == '02'">
		            AND b.book_country_type = '02'
		        </if>
		    </if>
		GROUP BY
		    b.book_isbn,
		    b.book_name, 
		    b.book_price, 
		    b.book_publisher, 
		    b.book_author,
		    b.book_publish_date,
		    b.book_state,
		    b.book_qty,
		    b.book_thumbnail_changed
		<if test="orderByValue != null and !orderByValue.equals('')">
		    ORDER BY
		    <if test="orderByValue == 1">
		        order_count DESC
		    </if>
		    <if test="orderByValue == 2">
		        b.book_publish_date DESC
		    </if>
		    <if test="orderByValue == 3">
		        b.book_price ASC
		    </if>
		    <if test="orderByValue == 4">
		        reviews_rating_avg DESC
		    </if>
		    <if test="orderByValue == 5">
		        review_rating_cnt DESC
		    </if>
		</if>
	</select>

    <select id="getBookDetail" parameterType="java.lang.String" resultType="userProducts">
        SELECT
        b.book_isbn,
        b.book_name,
        b.book_price,
        b.book_publisher,
        b.book_author,
        b.book_intro,
        b.book_country_type,
        b.book_category,
        b.book_state,
        b.book_publish_date,
        COUNT(r.review_rating) AS review_rating_cnt,
        NVL(TRUNC(SUM(r.review_rating) / COUNT(r.review_rating), 2), 0) AS reviews_rating_avg,
        b.book_thumbnail_changed
        FROM
        books b
        LEFT JOIN customer_order_details cod ON b.book_isbn = cod.book_isbn
        LEFT JOIN reviews r ON cod.order_detail_num = r.order_detail_num
        WHERE b.book_isbn = #{book_isbn}
        GROUP BY
        b.book_isbn,
        b.book_name,
        b.book_price,
        b.book_publisher,
        b.book_author,
        b.book_intro,
        b.book_country_type,
        b.book_category,
        b.book_state,
        b.book_publish_date,
        b.book_thumbnail_changed
    </select>

    <select id="getUserReviewList" resultType="userReview" parameterType="userReview">
        SELECT
        cod.book_isbn,
        r.member_id,
        r.review_content,
        r.review_rating,
        r.review_write_date
        FROM
        customer_order_details cod
        INNER JOIN reviews r ON cod.order_detail_num = r.order_detail_num
        WHERE cod.book_isbn = #{book_isbn}
    </select>

    <select id="getReviewPercent" parameterType="string" resultType="userReview">
        WITH ReviewCounts AS (
        SELECT
        r.review_rating,
        COUNT(*) AS review_count
        FROM
        customer_order_details cod
        LEFT JOIN
        reviews r ON cod.order_detail_num = r.order_detail_num
        WHERE
        cod.book_isbn = #{book_isbn}
        GROUP BY
        r.review_rating
        ),
        TotalReviews AS (
        SELECT
        COUNT(*) AS total_count
        FROM
        customer_order_details cod
        LEFT JOIN
        reviews r ON cod.order_detail_num = r.order_detail_num
        WHERE
        cod.book_isbn = #{book_isbn}
        ),
        AllRatings AS (
        SELECT 1 AS review_rating FROM DUAL
        UNION ALL
        SELECT 2 FROM DUAL
        UNION ALL
        SELECT 3 FROM DUAL
        UNION ALL
        SELECT 4 FROM DUAL
        UNION ALL
        SELECT 5 FROM DUAL
        )
        SELECT
        a.review_rating,
        COALESCE(rc.review_count, 0) AS review_count,
        CASE
        WHEN tr.total_count = 0 THEN '0%'
        ELSE CONCAT(ROUND(COALESCE(rc.review_count, 0) * 100.0 / tr.total_count), '%')
        END AS review_percentage
        FROM
        AllRatings a
        LEFT JOIN
        ReviewCounts rc ON a.review_rating = rc.review_rating
        CROSS JOIN
        TotalReviews tr
        ORDER BY
        a.review_rating desc
    </select>


</mapper>