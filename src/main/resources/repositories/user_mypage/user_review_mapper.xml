<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ezen.bookstore.user.mypage.mapper.UserReviewMapper">
	
	<!-- 조건에 따라 리뷰를 기다리는 도서 목록 조회 -->
	<select id="getPendingReviews" parameterType="BookReview" resultType="BookReview">
		SELECT 
		    B.BOOK_ISBN,
		    B.BOOK_NAME,
		    B.BOOK_AUTHOR,
		    CO.ORDER_PURCHASE_DATE,
		    COD.ORDER_DETAIL_NUM,
		    R.REVIEW_NUM,
		    R.REVIEW_CONTENT,
		    R.REVIEW_RATING,
		    R.REVIEW_WRITE_DATE
		FROM 
		    MEMBERS M
		JOIN 
		    CUSTOMER_ORDERS CO ON M.MEMBER_ID = CO.MEMBER_ID
		JOIN 
		    CUSTOMER_ORDER_DETAILS COD ON CO.ORDER_NUM = COD.ORDER_NUM
		JOIN 
		    BOOKS B ON COD.BOOK_ISBN = B.BOOK_ISBN
		LEFT JOIN 
		    REVIEWS R ON COD.ORDER_DETAIL_NUM = R.ORDER_DETAIL_NUM
		WHERE 
		    M.MEMBER_ID = #{member_id}
		    AND R.REVIEW_NUM IS NULL 
		<if test="startDate != null and endDate != null">
		    AND CO.ORDER_PURCHASE_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
	</select>

	<!-- 작성한 리뷰 목록 조회 -->
	<select id="getWrittenReviews" parameterType="BookReview" resultType="BookReview">
	    SELECT 
	        B.BOOK_ISBN,
	        B.BOOK_NAME,
	        B.BOOK_AUTHOR,
	        CO.ORDER_PURCHASE_DATE,
	        COD.ORDER_DETAIL_NUM,  -- 주문 상세 번호
	        R.REVIEW_NUM,
	        R.REVIEW_CONTENT,
	        R.REVIEW_RATING,
	        R.REVIEW_WRITE_DATE
	    FROM 
	        MEMBERS M
	    JOIN 
	        CUSTOMER_ORDERS CO ON M.MEMBER_ID = CO.MEMBER_ID
	    JOIN 
	        CUSTOMER_ORDER_DETAILS COD ON CO.ORDER_NUM = COD.ORDER_NUM
	    JOIN 
	        BOOKS B ON COD.BOOK_ISBN = B.BOOK_ISBN
	    JOIN 
	        REVIEWS R ON COD.ORDER_DETAIL_NUM = R.ORDER_DETAIL_NUM  
	    WHERE 
	        M.MEMBER_ID = #{member_id}
	        AND R.REVIEW_NUM IS NOT NULL
	        <if test="startDate != null and endDate != null">
	        	AND R.REVIEW_WRITE_DATE BETWEEN #{startDate} AND #{endDate}
	        </if>
	</select>


	<!-- 리뷰 조회 -->
	<select id="getReviewByReviewNum" parameterType="Integer" resultType="BookReview">
		 SELECT 
        R.REVIEW_NUM,
        R.REVIEW_CONTENT,
        R.REVIEW_RATING,
        R.REVIEW_WRITE_DATE,
        B.BOOK_NAME
    FROM 
        REVIEWS R
    JOIN 
        CUSTOMER_ORDER_DETAILS COD ON R.ORDER_DETAIL_NUM = COD.ORDER_DETAIL_NUM
    JOIN 
        BOOKS B ON COD.BOOK_ISBN = B.BOOK_ISBN
    WHERE 
        R.REVIEW_NUM = #{reviewNum}
	</select>

	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="map">
		UPDATE REVIEWS
		SET 
			REVIEW_CONTENT = #{userBookReviewDTO.review_content},
			REVIEW_RATING = #{userBookReviewDTO.review_rating},
			REVIEW_WRITE_DATE = CURRENT_TIMESTAMP
		WHERE 
			REVIEW_NUM = #{reviewNum}
	</update>

	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="Integer">
		DELETE FROM 
			REVIEWS 
		WHERE 
			REVIEW_NUM = #{reviewNum}
	</delete>
	
	
	<select id="getOrderDetail" parameterType="Integer" resultType="BookReview">
		SELECT 
			B.book_isbn,
		    B.book_name,              
		    B.book_author,
		    COD.order_detail_num,               
		    CO.order_purchase_date,      
		    R.review_rating              
		FROM 
		    Customer_Order_Details COD
		JOIN 
		    Customer_Orders CO ON COD.order_num = CO.order_num
		JOIN 
		    Books B ON COD.book_isbn = B.book_isbn
		LEFT JOIN 
		    Reviews R ON COD.order_detail_num = R.order_detail_num
		WHERE 
		    COD.order_detail_num = #{orderDetailNum}
	
	</select>
	
	
	<insert id="insertReview" parameterType="BookReview">
    INSERT INTO 
    	REVIEWS 
    	(review_num, member_id, order_detail_num, review_content, review_rating, review_write_date)
    VALUES 
    	(REVIEW_VIEWS_SEQ.NEXTVAL, #{member_id}, #{order_detail_num}, #{review_content}, #{review_rating}, CURRENT_TIMESTAMP)
	</insert>
	
</mapper>